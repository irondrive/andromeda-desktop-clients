#!/bin/bash -e

which cppcheck || (echo "can't find cppcheck"; exit 1)

if ! [ -e build ]; then mkdir build; fi; cd build

if [ "$1" != "noinit" ]; then
    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
else shift; fi

PLATFORMS="native unix32 unix64 win32A win32W win64"
LOGFILE=cppcheck/analyze_stderr.log

for PLAT in $PLATFORMS; do

    if [ -e $LOGFILE ]; then rm $LOGFILE; fi

    BUILD=cppcheck/$PLAT
    if ! [ -e cppcheck/$PLAT ]; then mkdir -p $BUILD; fi

    echo "scanning platform $PLAT..."
    cppcheck --project=compile_commands.json \
        --cppcheck-build-dir=$BUILD \
        --quiet --std=c++17 --platform=$PLAT \
        --suppress="*:*_deps/*" \
        --suppress="*:*_autogen/*" \
        --suppress=unmatchedSuppression \
        --suppress=missingIncludes \
        --suppress=missingIncludeSystem \
        --suppress=unreadVariable \
        --suppress=unusedFunction \
        --suppress=knownConditionTrueFalse \
        --suppress=useStlAlgorithm \
        --enable=style,performance,portability,information "$@" 2> $LOGFILE

    if [ -s $LOGFILE ]; then
        echo "found errors with target $PLAT!"
        cat $LOGFILE; exit 2
    fi
done; rm $LOGFILE
